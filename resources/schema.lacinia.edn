{;; //
 :objects
 {:LoginAck
  {:description "Possible return states from a login attempt"
   :fields
   {:message {:type (non-null :LoginAckMessage)}
    :user    {:type (non-null String)}}}

  :CreateGameAck
  {:fields
   {:id     {:type (non-null String)}
    :stocks {:type (list (non-null :Stock))}}}

  :BuyStockAck
  {:fields
   {:message {:type (non-null String)}}}

  :SellStockAck
  {:fields
   {:message {:type (non-null String)}}}

  :ControlEvent
  {:description "Possible control events that the client can send to the server"
   :fields
   {:event {:type (non-null :ControlEventType)}
    :gameId {:type (non-null String)}}}

  :Stock
  {:fields
   {:id     {:type (non-null String)}
    :name   {:type (non-null String)}
    :symbol {:type (non-null String)}}}

  :StockTick
  {:fields
   {:stockTickId    {:type (non-null String)}
    :stockTickTime  {:type (non-null String)}
    :stockTickClose {:type (non-null Float)}
    :stockId        {:type (non-null String)}
    :stockName      {:type (non-null String)}}}

  :ProfitLoss
  {:description "Container for portfolio updates"
   :fields
   {:profitLoss {:type (non-null Float)}
    :stockId    {:type String}
    :gameId     {:type (non-null String)}
    :profitLossType {:type :ProfitLossType}}}

  :AccountBalance
  {:description "Account Balance message"
   :fields
   {:id           {:type (non-null String)}
    :name         {:type (non-null String)}
    :balance      {:type (non-null Float)}
    :counterParty {:type String :description "Name of the stock attached to this account"}
    :amount       {:type Int :description "The amount of units (stock shares) of the counterparty"}}}

  :LevelStatus
  {:description "Possible level status updates that the server can send to the client"
   :fields
   {:event {:type (non-null :LevelStatusType)}
    :gameId {:type (non-null String)}
    :profitLoss {:type (non-null String)}
    :level {:type (non-null Int)} }}

  :LevelTimer
  {:description "Timer countdown events, streamed from server to client"
   :fields
   {:gameId {:type (non-null String)}
    :level {:type (non-null Int)}
    :minutesRemaining {:type (non-null Int)}
    :secondsRemaining {:type (non-null Int)}}}

  :GameStatus
  {:description "The status of a user's game, in the system"
   :fields
   {:gameId {:type String}
    :status {:type :GameStatusType}
    :profitLoss {:type (list :ProfitLoss)}}}

  :User
  {:fields
   {:userEmail {:type String}
    :userName {:type String}
    :userExternalUid {:type String}
    :games {:type (list :GameStatus)}}}

  :Payment
  {:fields
   {:paymentId {:type (non-null String)}
    :productId {:type (non-null String)}
    :provider {:type (non-null String)}}}

  :StripeCustomer
  {:fields
   {:id {:type (non-null String)}
    :email {:type (non-null String)}}}

  :DeleteStripeCustomerAck
  {:fields
   {:message {:type (non-null String)}}}}


 ;; //
 :enums
 {:LoginAckMessage
  {:values [:useradded :userexists]}

  :ProfitLossType
  {:values [:running :realized]}

  :ControlEventType
  {:values      [:pause :resume :join :exit :restart]}

  :LevelStatusType
  {:values [:win :lose]}

  :GameStatusType
  {:values [:created :running :paused :won :lost :exited]}}


 ;; //
 :unions
 {:GameEvent
  {:members [:ControlEvent :LevelStatus :LevelTimer]}

  :PortfolioUpdate
  {:members [:ProfitLoss :AccountBalance]}}


 ;; //
 :input-objects
 {:BuyStock
  {:description "An event to buy a stock"
   :fields
   {:gameId      {:type (non-null String)}
    :stockId     {:type (non-null String)}
    :stockAmount {:type (non-null Int)}
    :tickId      {:type (non-null String)}
    :tickPrice   {:type (non-null Float)}}}

  :SellStock
  {:description "An event to sell a stock"
   :fields
   {:gameId      {:type (non-null String)}
    :stockId     {:type (non-null String)}
    :stockAmount {:type (non-null Int)}
    :tickId      {:type (non-null String)}
    :tickPrice   {:type (non-null Float)}}}}


 ;; //
 :queries
 {:accountBalances
  {:type    (list (non-null :AccountBalance))
   :args    {:gameId {:type (non-null String)}
             :email {:type (non-null String)}}
   :resolve :resolve-account-balances
   :description "Returns accountBalances, per game, per user"}

  :user
  {:type (non-null :User)
   :args {:email {:type (non-null String)}}
   :resolve :resolve-user
   :description "Return data for a given user"}

  :users
  {:type (list (non-null :User))
   :resolve :resolve-users
   :description "Lists all the users in the system"}

  :userPersonalProfitLoss
  {:type (list :ProfitLoss)
   :args {:email {:type (non-null String)}
          :gameId {:type String} ;; per game
          :groupByStock {:type Boolean} ;; per stock, per game
          }
   :resolve :resolve-user-personal-profit-loss
   :description "Lists out a User's personal Profit/Loss, all, per game, per stock"}

  :userMarketProfitLoss
  {:type (list (non-null :ProfitLoss))
   :args {:email {:type (non-null String)}}
   :resolve :resolve-user-market-profit-loss
   :description "Lists out a User's market Profit/Loss, per stock"}

  :games
  {:type (list :GameStatus)
   :resolve :resolve-games
   :description "Lists out a User's open, running and finished games, per device"}

  :userPayments
  {:type (list :Payment)
   :resolve :user-payments}}


 ;; //
 :mutations
 {:login
  {:type        :LoginAck
   :description "Logs a user in, using Firebase's ID JWT"
   :resolve     :resolve-login}

  :createGame
  {:type        :CreateGameAck
   :description "Creates a new game"
   :resolve     :resolve-create-game
   :args
   {:gameLevel {:type (non-null Int)}}}

  :startGame
  {:type        (list (list :StockTick))
   :description "Starts streaming that games stock data. Conditionally returns a :StockTick history, if a :startPosition was supplied."
   :resolve     :resolve-start-game
   :args
   {:id            {:type (non-null String)}
    :startPosition {:type Int :description "Optionally start the game at a given position in the tick time series.
                                            Note: This will start all stocks at this position."}}}


  :buyStock
  {:type    :BuyStockAck
   :args    {:input {:type :BuyStock}}
   :resolve :resolve-buy-stock}

  :sellStock
  {:type    :SellStockAck
   :args    {:input {:type :SellStock}}
   :resolve :resolve-sell-stock}


  :pauseGame
  {:type :ControlEvent
   :resolve :resolve-pause-game
   :args
   {:gameId {:type (non-null String)}}}

  :resumeGame
  {:type :ControlEvent
   :resolve :resolve-resume-game
   :args
   {:gameId {:type (non-null String)}}}

  :restartGame
  {:type :ControlEvent
   :resolve :resolve-restart-game
   :args
   {:gameId {:type (non-null String)}}}

  :exitGame
  {:type :ControlEvent
   :resolve :resolve-exit-game
   :args
   {:gameId {:type (non-null String)}}}

  :verifyPayment
  {:type    (list :Payment)
   :resolve :verify-payment
   :args
   {:productId {:type (non-null String)}
    :provider {:type (non-null String)}
    :token {:type (non-null String)}}}

  :createStripeCustomer
  {:type (list :StripeCustomer)
   :resolve :create-stripe-customer
   :args
   {:email {:type (non-null String)}}}

  :deleteStripeCustomer
  {:type :DeleteStripeCustomerAck
   :resolve :delete-stripe-customer
   :args
   {:id {:type (non-null String)}}}}


 ;; //
 :subscriptions
 {:stockTicks
  {:type   (list (non-null :StockTick))
   :stream :stream-stock-ticks
   :args
   {:gameId {:type (non-null String)}}}

  :portfolioUpdates
  {:type   (list :PortfolioUpdate)
   :stream :stream-portfolio-updates
   :args
   {:gameId {:type (non-null String)}}}

  :gameEvents
  {:type   :GameEvent
   :stream :stream-game-events
   :args
   {:gameId {:type (non-null String)}}}}}
