{
 ;; //
 :objects
 {:Stock
  {:fields
   {:id     {:type (non-null String)}
    :name   {:type (non-null String)}
    :symbol {:type (non-null String)}}}

  :StockTick
  {:fields
   {:stockTickId {:type (non-null String)}
    :stockTickTime {:type (non-null Int)}
    :stockTickClose {:type (non-null Float)}
    :stockId {:type (non-null String)}}}

  #_[{:stockTickId "d6918e67-84e8-4b97-aa99-c9c6f5e5ba95"
      :stockTickTime 1593185675611
      :stockTickClose 105.64
      :stockId "a6053ea6-591a-4ec2-8312-5131d9fe2b68"}]

  #_[{:game.stock.tick/id "d6918e67-84e8-4b97-aa99-c9c6f5e5ba95"
      :game.stock.tick/trade-time 1593185675611
      :game.stock.tick/close 105.64}
     {:game.stock/id "a6053ea6-591a-4ec2-8312-5131d9fe2b68"
      :game.stock/name "Honest Toe"
      :game.stock/symbol "HONE"}]

  :CreateGamekAck
  {:fields
   {:id            {:type (non-null String)}
    :subscriptions {:type (list (non-null :Stock))}
    :stocks        {:type (list (non-null :Stock))}}}

  :BuyStockAck
  {:fields
   {:message {:type (non-null String)}}}

  :SellStockAck
  {:fields
   {:message {:type (non-null String)}}}

  :ProfitLoss
  {:description "Container for portfolio updates"
   :fields
   {:profitLoss  {:type (non-null Float)}
    :stockId     {:type (non-null String)}
    :stockAmount {:type (non-null Int)}
    :gameId      {:type (non-null String)}
    :tradePrice  {:type (non-null Float)}
    :tickId      {:type (non-null String)}
    :tickPrice   {:type (non-null Float)}}}

  :AccountBalance
  {:description "Account Balance message"
   :fields
   {:id           {:type (non-null String)}
    :name         {:type (non-null String)}
    :balance      {:type (non-null Float)}
    :type         {:type (non-null String)}
    :counterParty {:type String :description "Name of the stock attached to this account"}
    :amount       {:type Int :description "The amount of units (stock shares) of the counterparty"}}}

  :GameEvent
  {:description "Game events"
   :fields
   {:message {:type (non-null :GameEventMessage)}
    :gameId {:type (non-null String)}}}}


 ;; //
 :enums
 {:LoginAck
  {:description "Possible return states from a login attempt"
   :values      [:useradded :userexists]}

  :StartGameAck
  {:descriptiuon "Expected return value when starting a game"
   :values      [:gamestarted]}

  :GameEventMessage
  {:description "Possible game event messages that can be sent to the client"
   :values      [:pause :resume :exit]}}


 ;; //
 :unions
 {:PortfolioUpdate
  {:members [:ProfitLoss :AccountBalance]}}


 ;; //
 :input-objects
 {:BuyStock
  {:description "An event to buy a stock"
   :fields
   {:gameId      {:type (non-null String)}
    :stockId     {:type (non-null String)}
    :stockAmount {:type (non-null Int)}
    :tickId      {:type (non-null String)}
    :tickTime    {:type (non-null Int)}
    :tickPrice   {:type (non-null Float)}}}

  :SellStock
  {:description "An event to sell a stock"
   :fields
   {:gameId      {:type (non-null String)}
    :stockId     {:type (non-null String)}
    :stockAmount {:type (non-null Int)}
    :tickId      {:type (non-null String)}
    :tickTime    {:type (non-null Int)}
    :tickPrice   {:type (non-null Float)}}}}


 ;; //
 :queries
 {:accountBalances
  {:type (list (non-null :AccountBalance))
   :args {:gameId {:type (non-null String)}}
   :resolve :resolve-account-balances}

  :stockHistory
  {:type (list (non-null :StockTick))
   :args {:gameId {:type (non-null String)}
          :stockId {:type (non-null String)}
          :range {:type (list (non-null Int))}}
   :resolve :resolve-stock-history
   :description "Called after game is created (where stocks are created)"}}


 ;; //
 :mutations
 {:login
  {:type    :LoginAck
   :resolve :resolve-login}

  :createGame
  {:type        :CreateGamekAck
   :description "Creates a new game"
   :resolve     :resolve-create-game}

  :startGame
  {:type        :StartGameAck
   :description "Starts streaming that games stock data"
   :resolve     :resolve-start-game
   :args
   {:id {:type (non-null String)}}}

  :buyStock
  {:type    :BuyStockAck
   :args    {:input {:type :BuyStock}}
   :resolve :resolve-buy-stock}

  :sellStock
  {:type    :SellStockAck
   :args    {:input {:type :SellStock}}
   :resolve :resolve-sell-stock}}


 ;; //
 :subscriptions
 {:stockTicks
  {:type   (list (non-null :StockTick))
   :stream :stream-stock-ticks
   :args
   {:id {:type (non-null String)}}}

  :portfolioUpdates
  {:type   :PortfolioUpdate
   :stream :stream-portfolio-updates
   :args
   {:id {:type (non-null String)}}}

  :gameEvents
  {:type   :GameEvent
   :stream :stream-game-events
   :args
   {:id {:type (non-null String)}}}}}
